#Использовать restler
#Использовать logos
#Использовать fs
#Использовать json

Перем Лог;

Перем ТокенАвторизации;
Перем мКаталогСкачивания;
Перем КартаИмен;

Перем Клиент;
Перем Канал;

Функция ПрочестьСекретныйПараметр(ИмяПараметра)
	
	ЗначениеПеременной = ПолучитьПеременнуюСреды(ИмяПараметра);
	Возврат Строка(ЗначениеПеременной); // неопределено в строку
	
КонецФункции

Процедура Инициализация(Знач КаталогСкачивания) Экспорт
	ПарсерJSON = Новый ПарсерJSON;
	мКаталогСкачивания = КаталогСкачивания;
	ФС.ОбеспечитьКаталог(КаталогСкачивания);
	Лог = Логирование.ПолучитьЛог("oscript.hub-backend.log");
	ТокенАвторизации = ПрочестьСекретныйПараметр("GITHUB_SUPER_TOKEN");
	ПрочитатьКартуИмен();

	Отбор = Новый Соответствие();
	Отбор.Вставить("Имя", "stable");
	Канал = МенеджерБазыДанных.МенеджерСущностей.ПолучитьОдно(Тип("Канал"), Отбор);

	Клиент = Новый КлиентGitHub(ТокенАвторизации);

КонецПроцедуры

Процедура ПрочитатьКартуИмен()
	ФайлКарты = ОбъединитьПути(СтартовыйСценарий().Каталог, "nameRemap.json");
	
	Если ФС.ФайлСуществует(ФайлКарты) Тогда
		КартаИмен = ОбщегоНазначения.ПрочитатьJson(ФайлКарты);
	Иначе
		ВызватьИсключение "АА";
		КартаИмен = Новый Соответствие;
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьФайлыОписаний() Экспорт
	
	Организация = Клиент.ПолучитьОрганизацию("oscript-library");
	Лог.Информация("Запрашиваю список репозиториев");
	Навигатор = Новый НавигаторРепозиториев(Организация);
	Пока Навигатор.ПолучитьСледующие(Клиент) Цикл
		
		Лог.Информация("Получаю очередную порцию");
		СписокРепозиториев = Навигатор.Репозитории();
		СохранитьФайлОписанияДляПорции(СписокРепозиториев);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьФайлОписанияДляПорции(СписокРепозиториев)
	
	Для Каждого Репозиторий Из СписокРепозиториев Цикл
		
		Лог.Информация("Получаю README для " + Репозиторий.Имя);
		
		Контент = Клиент.ПолучитьКонтент(Репозиторий, "readme");
		Если Контент = Неопределено Тогда
			Лог.Ошибка("Не удалось получить описание для " + Репозиторий.Имя + " 
			|" + ОписаниеОшибки());
			Продолжить;
		КонецЕсли;
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("md");
		
		ИмяПакета = Репозиторий.Имя;
		КаталогРепозитория = ОбъединитьПути(мКаталогСкачивания, ИмяПакета); 
		Каталог = Новый Файл(КаталогРепозитория);
		Если Не ФС.КаталогСуществует(Каталог.ПолноеИмя) Тогда
			ИмяПакетаИзКарты = КартаИмен[Репозиторий.Имя];
			Если ИмяПакетаИзКарты <> Неопределено Тогда
				ИмяПакета = ИмяПакетаИзКарты;
				КаталогРепозитория = ОбъединитьПути(мКаталогСкачивания, ИмяПакета); 
				Каталог = Новый Файл(КаталогРепозитория);
			КонецЕсли;
		КонецЕсли;
		
		Если Не ФС.КаталогСуществует(Каталог.ПолноеИмя) Тогда
			Лог.Информация("Пропускаю репо %1, т.к. целевой каталог отсутствует", Репозиторий.Имя);
			Продолжить;
		КонецЕсли;
		
		ДД = Контент.ДвоичныеДанные();
		Если ДД = Неопределено Тогда
			Лог.Ошибка("Двоичные данные readme не получены.");
			Продолжить;
		КонецЕсли;
		
		ПутьКReadme = ОбъединитьПути(КаталогРепозитория, Контент.Имя);
		ДД.Записать(ПутьКReadme);
		
		// добавим в бд
		Пакет = МенеджерБазыДанных.МенеджерСущностей.ПолучитьОдно(Тип("Пакет"), ИмяПакета);
		Если Пакет = Неопределено Тогда
			Лог.Ошибка("Пакет %1 не найден по имени в БД", ИмяПакета);
			Продолжить;	
		КонецЕсли;
		
		ЕстьИзменения = Ложь;
		Если Не ЗначениеЗаполнено(Пакет.ПутьКОписанию) Тогда
			Пакет.ПутьКОписанию = ОбъединитьПути(Канал.Каталог, ИмяПакета, Контент.Имя); // относительный путь
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Пакет.СсылкаНаПроект) Тогда
			Пакет.СсылкаНаПроект = Репозиторий.СсылкаHTML;
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		Если ЕстьИзменения Тогда
			Пакет.Сохранить();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры