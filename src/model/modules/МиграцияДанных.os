
Функция ЗапуститьИмпортВБД() Экспорт

	Результат = Истина;

	КаталогПакетов = ОбъединитьПути(ПереченьПакетов.КаталогХраненияПакетов(), "download");
	
	ОчиститьБазуДанных(КаталогПакетов);
	ЗагрузитьДанныеВБазеДанных(КаталогПакетов);

	Возврат Результат;

КонецФункции

Процедура ОчиститьБазуДанных(Каталог)

	КоллекцияНастроек = МенеджерБазыДанных.НастройкиМенеджер.Получить();
	Для Каждого Настройка Из КоллекцияНастроек Цикл
		МенеджерБазыДанных.НастройкиМенеджер.Удалить(Настройка);	
	КонецЦикла;

	КоллекцияВерсийПакетов = МенеджерБазыДанных.ВерсииПакетовМенеджер.Получить();
	Для Каждого ВерсияПакета Из КоллекцияВерсийПакетов Цикл
		МенеджерБазыДанных.ВерсииПакетовМенеджер.Удалить(ВерсияПакета);	
	КонецЦикла;

	КоллекцияПакеты = МенеджерБазыДанных.ПакетыМенеджер.Получить();
	Для Каждого Пакет Из КоллекцияПакеты Цикл
		МенеджерБазыДанных.ПакетыМенеджер.Удалить(Пакет);	
	КонецЦикла;

	КоллекцияАвторов = МенеджерБазыДанных.АвторыМенеджер.Получить();
	Для Каждого Автор Из КоллекцияАвторов Цикл
		МенеджерБазыДанных.АвторыМенеджер.Удалить(Автор);	
	КонецЦикла;

	КоллекцияКаналов = МенеджерБазыДанных.КаналыМенеджер.Получить();
	Для Каждого Канал Из КоллекцияКаналов Цикл
		МенеджерБазыДанных.КаналыМенеджер.Удалить(Канал);	
	КонецЦикла;



КонецПроцедуры

Процедура ЗагрузитьДанныеВБазеДанных(РабочийКаталог)

	Канал = Новый Канал();
	Канал.Имя = "stable";
	Канал.Сохранить();

	НайденныеЭлементыКаталога = НайтиФайлы(РабочийКаталог, "*");
	Для Каждого ЭлементКаталога Из НайденныеЭлементыКаталога Цикл

		Каталог = Новый Файл(ЭлементКаталога.ПолноеИмя);
		Если Не Каталог.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;

		ИмяПакета = Каталог.Имя;
		Сообщить("Обработка " + ИмяПакета);

		ПутьКМетаданным = ОбъединитьПути(ЭлементКаталога.ПолноеИмя, "meta.json");
		Попытка
			МетаОписание = ОбщегоНазначения.ПрочитатьJSON(ПутьКМетаданным);
		Исключение
			МетаОписание = Неопределено;
			Сообщить("Не удалось получить / прочитать meta.json пакета " + ИмяПакета);
		КонецПопытки;
		
		Пакет = Новый Пакет();
		Пакет.Код = ИмяПакета; 
		Пакет.Наименование = ИмяПакета;
		Если МетаОписание = Неопределено Тогда
			Пакет.Описание = "";
			//Пакет.Автор = Неопределено;
			Пакет.КлючевыеСлова = "";
			Пакет.СсылкаНаПроект = "";
			//Пакет.Версии = Неопределено;
		Иначе

			//Автор = ПолучитьСоздатьАвтора(МетаОписание.Получить("Автор"));

			Пакет.Описание = МетаОписание.Получить("Описание");
			//Пакет.Автор = Автор.Код; // подгружаем автора из другой таблицы
			Пакет.КлючевыеСлова = МетаОписание.Получить("КлючевыеСлова");
			Пакет.СсылкаНаПроект = МетаОписание.Получить("АдресРепозитория");
			//Пакет.Версии = Неопределено;
		КонецЕсли;
		
		Пакет.Путь = ОбъединитьПути(Канал.Имя, ИмяПакета);
		Пакет.ПутьКОписанию = ОбъединитьПути(Пакет.Путь, "readme.md");
		//Пакет.Версии = Новый Массив;
		Пакет.Сохранить();

		//Возврат;
		
		Если МетаОписание = Неопределено Тогда
			
			// перебираем файлы
			
		Иначе
			
			НомерАктуальнойВерсии = МетаОписание.Получить("АктуальнаяВерсия");
			АктуальнаяВерсия = Неопределено;

			Пакет.АктуальнаяВерсия = НомерАктуальнойВерсии; // надо по другому
			
			// идем по каждой версии
			Для Каждого ЭлементВерсия Из МетаОписание.Получить("Версии") Цикл
				
				ИмяФайлаВерсии = СтрШаблон("%1-%2.ospx", ИмяПакета, ЭлементВерсия);
				ПутьКФайлуВерсии = ОбъединитьПути(ЭлементКаталога.ПолноеИмя, ИмяФайлаВерсии);
				ФайлВерсии = Новый Файл(ПутьКФайлуВерсии);
				Если ФайлВерсии.Существует() Тогда
					
					ВерсияПакета = Новый ВерсияПакета();
					ВерсияПакета.Номер = ЭлементВерсия;
					ВерсияПакета.Пакет = Пакет.Код;
					ВерсияПакета.Путь = ОбъединитьПути(Пакет.Путь, ИмяФайлаВерсии);
					ВерсияПакета.Канал = Канал.Код;
					//ВерсияПакета.Зависимости = ПрочитатьЗависимостиПакета(ПутьКФайлуВерсии);					
					ВерсияПакета.Сохранить();
					
					// Если ЭлементВерсия = НомерАктуальнойВерсии Тогда				
					// 	Пакет.АктуальнаяВерсия = ВерсияПакета;						
					// КонецЕсли;
					
				Иначе
					
					Сообщить(ИмяПакета + ": не найдена версия " + ЭлементВерсия);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Пакет.Сохранить();
			
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// TODO: Переделать
Функция ПрочитатьЗависимостиПакета(ИмяФайла)
	
	КоллекцияЭлементов = Новый Массив;
	Архив = Новый ЧтениеZipФайла(ИмяФайла);
	ЭлементМанифеста = Архив.Элементы.Найти("opm-metadata.xml");
	Если ЭлементМанифеста = Неопределено Тогда
		Возврат КоллекцияЭлементов;
	КонецЕсли;
	
	ВременныйКаталог = ПолучитьИмяВременногоФайла();
	Архив.Извлечь(ЭлементМанифеста, ВременныйКаталог);
	Архив.Закрыть();
	
	ПутьКМетаданным = ОбъединитьПути(ВременныйКаталог, "opm-metadata.xml");
	
	Чтение = Новый ЧтениеXML();
	Попытка
		Чтение.ОткрытьФайл(ПутьКМетаданным);
		Пока Чтение.Прочитать() Цикл
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя = "depends-on" Тогда
				Зависимость = Новый Зависимость();
				Зависимость.Пакет = Чтение.ЗначениеАтрибута("name");
				Зависимость.Версия = Чтение.ЗначениеАтрибута("version");
				Зависимость.МаксимальнаяВерсия = "999.0.0"; // TODO: есть ли максимальные версии в природе?
				Зависимость.Сохранить();

				// Зависимость = Новый Структура("Пакет, Версия, ВерсияМаксимальная");
				// Зависимость.Пакет = Чтение.ЗначениеАтрибута("name");
				// Зависимость.Версия = Чтение.ЗначениеАтрибута("version");
				// Зависимость.ВерсияМаксимальная = "";
				КоллекцияЭлементов.Добавить(Зависимость);
			КонецЕсли;
		КонецЦикла;
	Исключение
		Сообщить("Не удалось прочитать метаданные " + ИмяФайла);
	КонецПопытки;
	Чтение.Закрыть();
	
	Попытка
		УдалитьФайлы(ВременныйКаталог);
	Исключение
		Сообщить("Не удалось удалить временный каталог: " + ВременныйКаталог);
	КонецПопытки;
	
	Возврат КоллекцияЭлементов;
	
КонецФункции

Функция ПолучитьСоздатьАвтора(ИмяАвтора)
	
	Если Не ЗначениеЗаполнено(ИмяАвтора) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// todo: Переделать!
	МенеджерАвторов = Новый Автор();
	Автор = МенеджерАвторов.НайтиАвтораПоИмени(МенеджерБазыДанных.МенеджерСущностей, ИмяАвтора);
	Если Автор = Неопределено Тогда
		Автор = Новый Автор();
	КонецЕсли;
	Автор.Имя = ИмяАвтора;
	Автор.Сохранить();
	
	Возврат Автор;
	
КонецФункции