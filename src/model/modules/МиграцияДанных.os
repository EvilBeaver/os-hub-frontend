
Функция ЗапуститьИмпортВБД() Экспорт

	Результат = Истина;
	
	// не мигрируем данные, если есть записи в таблице Пакеты
	КоллекцияПакеты = МенеджерБазыДанных.ПакетыМенеджер.Получить();
	Если КоллекцияПакеты.Количество() > 0 Тогда
		Возврат Результат;
	КонецЕсли;

	ОчиститьБазуДанных();
	ЗагрузитьДанныеВБазеДанных();

	Возврат Результат;

КонецФункции

Процедура ОчиститьБазуДанных()

	Сообщить("Очистка базы данных");
	МенеджерБазыДанных.МенеджерСущностей.ПолучитьКоннектор().ВыполнитьЗапрос("DELETE FROM ВерсияПакета_Зависимости");
	ОчиститьТаблицуСущности("ВерсияПакета");
	ОчиститьТаблицуСущности("Зависимость");
	ОчиститьТаблицуСущности("ПакетКанала");
	ОчиститьТаблицуСущности("Пакет");
	ОчиститьТаблицуСущности("Автор");
	ОчиститьТаблицуСущности("Канал");

КонецПроцедуры

Процедура ОчиститьТаблицуСущности(Тип)

	Коллекция = МенеджерБазыДанных.МенеджерСущностей.Получить(Тип(Тип));
	Для Каждого ЭлементКоллекции Из Коллекция Цикл
		МенеджерБазыДанных.МенеджерСущностей.Удалить(ЭлементКоллекции);	
	КонецЦикла;

КонецПроцедуры

Процедура ЗагрузитьДанныеВБазеДанных()

	Канал = Новый Канал();
	Канал.Имя = "stable";
	Канал.Каталог = "download";
	Канал.Сохранить();
	КаталогПакетов = ОбъединитьПути(ПереченьПакетов.КаталогХраненияПакетов(), Канал.Каталог);

	КаналРазработка = Новый Канал();
	КаналРазработка.Имя = "develop";
	КаналРазработка.Каталог = "dev-channel";
	КаналРазработка.Сохранить();
	КаталогПакетовРазработка = ОбъединитьПути(ПереченьПакетов.КаталогХраненияПакетов(), КаналРазработка.Каталог);

	НайденныеЭлементыКаталога = НайтиФайлы(КаталогПакетов, "*");
	Для Каждого ЭлементКаталога Из НайденныеЭлементыКаталога Цикл

		Каталог = Новый Файл(ЭлементКаталога.ПолноеИмя);
		Если Не Каталог.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;

		ИмяПакета = Каталог.Имя;
		Сообщить("Обработка " + ИмяПакета);

		ПутьКМетаданным = ОбъединитьПути(ЭлементКаталога.ПолноеИмя, "meta.json");
		Попытка
			МетаОписание = ОбщегоНазначения.ПрочитатьJSON(ПутьКМетаданным);
		Исключение
			МетаОписание = Неопределено;
			Сообщить("Не удалось получить / прочитать meta.json пакета " + ИмяПакета);
		КонецПопытки;
		
		Пакет = Новый Пакет();
		Пакет.Код = ИмяПакета; 
		Пакет.Наименование = ИмяПакета;
		Если МетаОписание = Неопределено Тогда

			Пакет.Описание = "";
			Пакет.Автор = Неопределено;
			Пакет.КлючевыеСлова = "";
			Пакет.СсылкаНаПроект = "";

		Иначе

			Автор = ПолучитьСоздатьАвтора(МетаОписание.Получить("Автор"));

			Пакет.Описание = МетаОписание.Получить("Описание");
			Пакет.Автор = Автор; // подгружаем автора из другой таблицы
			Пакет.КлючевыеСлова = МетаОписание.Получить("КлючевыеСлова");
			Пакет.СсылкаНаПроект = МетаОписание.Получить("АдресРепозитория");

		КонецЕсли;
		
		Пакет.ПутьКОписанию = ОбъединитьПути(Канал.Каталог, ИмяПакета, "readme.md");
		Пакет.Сохранить();

		ПакетКанала = Новый ПакетКанала();
		ПакетКанала.Пакет = Пакет.Код;
		ПакетКанала.Путь = ОбъединитьПути(Канал.Каталог, ИмяПакета);
		ПакетКанала.Сохранить();

		Если МетаОписание = Неопределено Тогда
			
			// перебираем файлы руками
			
		Иначе
			
			НомерАктуальнойВерсии = МетаОписание.Получить("АктуальнаяВерсия");
			АктуальнаяВерсия = Неопределено;

			ПакетКанала.АктуальнаяВерсия = НомерАктуальнойВерсии;
			
			// идем по каждой версии
			Для Каждого ЭлементВерсия Из МетаОписание.Получить("Версии") Цикл
				
				ИмяФайлаВерсии = СтрШаблон("%1-%2.ospx", ИмяПакета, ЭлементВерсия);
				ПутьКФайлуВерсии = ОбъединитьПути(ЭлементКаталога.ПолноеИмя, ИмяФайлаВерсии);
				ФайлВерсии = Новый Файл(ПутьКФайлуВерсии);
				Если ФайлВерсии.Существует() Тогда
					
					ВерсияПакета = Новый ВерсияПакета();
					ВерсияПакета.Номер = ЭлементВерсия;
					ВерсияПакета.Пакет = Пакет.Код;
					ВерсияПакета.ПакетКанала = ПакетКанала.Код;
					ВерсияПакета.Путь = ОбъединитьПути(ПакетКанала.Путь, ИмяФайлаВерсии);
					ВерсияПакета.Канал = Канал.Код;
					ВерсияПакета.Зависимости = ПрочитатьЗависимостиПакета(ПутьКФайлуВерсии);					
					ВерсияПакета.Сохранить();
					
				Иначе
					
					Сообщить(ИмяПакета + ": не найдена версия " + ЭлементВерсия);
					
				КонецЕсли;
				
			КонецЦикла;
			
			ПакетКанала.Сохранить();
			
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// TODO: Переделать
Функция ПрочитатьЗависимостиПакета(ИмяФайла)
	
	КоллекцияЭлементов = Новый Массив;
	Архив = Новый ЧтениеZipФайла();
	Архив.Открыть(ИмяФайла,, КодировкаИменФайловВZipФайле.UTF8);
	ЭлементМанифеста = Архив.Элементы.Найти("opm-metadata.xml");
	Если ЭлементМанифеста = Неопределено Тогда
		Возврат КоллекцияЭлементов;
	КонецЕсли;
	
	ВременныйКаталог = ПолучитьИмяВременногоФайла();
	Архив.Извлечь(ЭлементМанифеста, ВременныйКаталог);
	Архив.Закрыть();
	
	ПутьКМетаданным = ОбъединитьПути(ВременныйКаталог, "opm-metadata.xml");
	
	Чтение = Новый ЧтениеXML();
	Попытка
		Чтение.ОткрытьФайл(ПутьКМетаданным);
		Пока Чтение.Прочитать() Цикл
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя = "depends-on" Тогда
				Зависимость = Новый Зависимость();
				Зависимость.Пакет = Чтение.ЗначениеАтрибута("name");
				Зависимость.Версия = Чтение.ЗначениеАтрибута("version");
				Зависимость.МаксимальнаяВерсия = "999.0.0"; // TODO: есть ли максимальные версии в природе?
				Зависимость.Сохранить();

				КоллекцияЭлементов.Добавить(Зависимость);
			КонецЕсли;
		КонецЦикла;
	Исключение
		Сообщить("Не удалось прочитать метаданные " + ИмяФайла);
	КонецПопытки;
	Чтение.Закрыть();
	
	Попытка
		УдалитьФайлы(ВременныйКаталог);
	Исключение
		Сообщить("Не удалось удалить временный каталог: " + ВременныйКаталог);
	КонецПопытки;
	
	Возврат КоллекцияЭлементов;
	
КонецФункции

Функция ПолучитьСоздатьАвтора(ИмяАвтора)
	
	Если Не ЗначениеЗаполнено(ИмяАвтора) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// todo: Переделать!
	МенеджерАвторов = Новый Автор();
	Автор = МенеджерАвторов.НайтиАвтораПоИмени(МенеджерБазыДанных.МенеджерСущностей, ИмяАвтора);
	Если Автор = Неопределено Тогда
		Автор = Новый Автор();
	КонецЕсли;
	Автор.Имя = ИмяАвтора;
	Автор.Сохранить();
	
	Возврат Автор;
	
КонецФункции