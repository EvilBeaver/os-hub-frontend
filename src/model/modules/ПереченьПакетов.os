#Использовать json

Перем Лог;
Перем ТаблицаПакетов

Процедура Инициализировать(Знач Путь) Экспорт

	ТаблицаПакетов = Новый ТаблицаЗначений;
	ТаблицаПакетов.Колонки.Добавить("Название");
	ТаблицаПакетов.Колонки.Добавить("Описание");
	ТаблицаПакетов.Колонки.Добавить("Автор");
	ТаблицаПакетов.Колонки.Добавить("КлючевыеСлова");
	ТаблицаПакетов.Колонки.Добавить("ПутьХранения");
	ТаблицаПакетов.Колонки.Добавить("Версии");
	ТаблицаПакетов.Колонки.Добавить("АктуальнаяВерсия");

	Лог = ОбщегоНазначения.ПолучитьЛог();
	ЗагрузитьБазуПакетовИзФайловойСистемы();

КонецПроцедуры

Процедура ЗагрузитьБазуПакетовИзФайловойСистемы()

	КаталогСтабильных = ОбъединитьПути(КаталогХраненияПакетов(),"download");
	
	Лог.Информация("Начинаю загрузку данных по существующим пакетам");

	КаталогиПакетов = НайтиФайлы(КаталогСтабильных, ПолучитьМаскуВсеФайлы());
	Для Каждого КаталогПакета Из КаталогиПакетов Цикл
		Если Не КаталогПакета.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;

		ОбработатьКаталогПакета(КаталогПакета);

	КонецЦикла;


КонецПроцедуры

Процедура ОбработатьКаталогПакета(Знач КаталогПакета)
	Лог.Информация("Загружаю данные по пакету %1", КаталогПакета.Имя);

	ФайлКешаДанных = Новый Файл(ОбъединитьПути(КаталогПакета.ПолноеИмя, "meta.json"));
	Если ФайлКешаДанных.Существует() Тогда
		ИнфоПакета = ПрочитатьКеш(ФайлКешаДанных.ПолноеИмя);
		Если КешАктуален(ИнфоПакета, КаталогПакета) Тогда
			Лог.Отладка("Кеш актуален");
			СтрПакета = ТаблицаПакетов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрПакета, ИнфоПакета);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	СтрокаПакета = ТаблицаПакетов.Добавить();
	СтрокаПакета.Название     = КаталогПакета.Имя;
	СтрокаПакета.ПутьХранения = КаталогПакета.ПолноеИмя;
	СтрокаПакета.Версии       = СобратьДанныеВерсий(СтрокаПакета.ПутьХранения);
	СтрокаПакета.АктуальнаяВерсия = СтрокаПакета.Версии[0]; // отсортировано от новых к старым
	
КонецПроцедуры

Функция СобратьДанныеВерсий(Знач КаталогХранения)
	ФайлыВерсий = НайтиФайлы(КаталогХранения, "*.ospx");
	МассивВерсий = Новый Массив;
	Для Каждого ФайлВерсии Из ФайлыВерсий Цикл

		ВерсияФайла = ВыделитьВерсию(ФайлВерсии.ИмяБезРасширения);
		Если ВерсияФайла = Неопределено Тогда
			// это файл "последней" версии. Пока непонятно что с ним делать
			// наверное можно что-то придумать полезное.
			Продолжить;
		КонецЕсли;

		// TODO 
		// - прочитать opm-метаданные
		// - после получения всех версий - отсортировать массив версий с помощью semver

	КонецЦикла;
КонецФункции

Функция ВыделитьВерсию(Знач ИмяФайла)
	Версия = "";
	Поз = Найти(ИмяФайла, "-");
	Если Поз <> 0 Тогда
		Версия = Сред(ИмяФайла, Поз + 1);
	КонецЕсли;

	Если ПустаяСтрока(Версия) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат Версия;

КонецФункции

Функция ПрочитатьКеш(Знач ПутьФайла)
	// TODO - сделать
	Возврат Новый Структура;
КонецФункции

Функция КешАктуален(Знач ИнфоПакета, Знач КаталогХранения)
	// TODO - сделать
	Возврат Ложь;
КонецФункции

Функция ПолучитьПакеты() Экспорт

КонецФункции

Процедура ОбновитьОписанияПакетов() Экспорт

	Скачиватель = Новый ОбновлятельОписаний();
	Скачиватель.Инициализация("model/readmes");
	Скачиватель.ПолезнаяРабота();

КонецПроцедуры

Функция КаталогХраненияПакетов() Экспорт
	Возврат ПолучитьПеременнуюСреды("OSHUB_BINARY_ROOT");
КонецФункции